{
    "contents" : "Simulation\n========================================================\nauthor: Etienne Low-DÃ©carie\ndate: January 22, 2016\n\nWhy simulate?\n========================================================\n\n- Eliminate the need for dice when playing Dungeons and Dragons\n- Dry run of experimental design\n- Test/understand a statistical approach\n- Explore theory\n- Bad reason: Fake data...\n\n[examples](http://serc.carleton.edu/sp/library/datasim//examples.html)\n\n***\n![Dungeons and Dragons dice](danddice.jpeg)\n\n\nSampling from a population\n========================================================\n\nThrowing a six face die\n\nCreate the die\n```{r}\ndie <-seq(from=1, to=6, by=1)\n```\nThrow the die\n```{r}\nsample(x=die, size=1, replace=T)\n```\n\nSampling from a population\n========================================================\n\nThrow the 1000 times and keep the results\n```{r}\ndie_results <- sample(x=die,\n                      size=1000,\n                      replace=T)\n```\n\n\nSampling from a population\n========================================================\n\nPlot the results\n```{r, eval=F}\nhist(die_results,\n     breaks=seq(from=0.5,\n                to=6.5,\n                by=1))\n```\n***\n```{r,echo=F}\nhist(die_results,\n     breaks=seq(from=0.5,\n                to=6.5,\n                by=1))\n```\n\n\n3D die\n========================================================\n```{r, eval=F}\n#load TeachingDemos\nrequire(TeachingDemos)\n#create the die\nrgl.die()\n#roll the regular die\nroll.rgl.die(steps=10)\n```\n***\n`TeachingDemos` also contains a `dice` that throws `ndice`, `rolls` times\n```{r, eval=F}\ndice(rolls=1,\n     ndice=1,\n     sides=6,\n     plot.it=T,\n     load=rep(1, 6))\n```\n\nChallenges\n========================================================\n\n1. Throw a 10 faced die\n2. Throw a coin\n3. Throw cheaters die that produces 6 50% of the time\n\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown2 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\nSolutions\n========================================================\n```{r}\ndie10 <-seq(from=1, to=10, by=1)\n```\n\n```{r}\ncoin <- c(\"head\", \"tails\")\n```\n\n```{r}\np_dice<-c(1,1,1,1,1,5)\ndie_results <- sample(x=die,\n                      size=1000,\n                      replace=T,\n                      prob= p_dice)\n```\n\n\n\nSampling from a distribution\n========================================================\n\nNormal distribution\n```{r,eval=F}\nrnorm(n = number of observations,\n      mean = vector of means,\n      sd = vector of means)\n```\n\nSampling from a distribution\n========================================================\n\nNormal distribution\n```{r}\nsample_norm <- rnorm(n = 10000,\n                     mean = 10,\n                     sd = 1)\nhist(sample_norm)\n```\n\nSampling from a distribution\n========================================================\n\nAvailable in base r:    \nbeta `beta`, binomial `binom`, Cauchy `cauchy`, chi-squared `chisq`, exponential `exp`, Fisher F `f`, gamma `gamma`, geometric `geom`, hypergeometric `hyper`, logistic `logis`, lognormal `lnorm`, negative binomial `nbinom`, normal `norm`, Poisson `pois`, Student t `t`, uniform `unif`, Weibull `weibull`\n\n[Distribution task view](https://cran.r-project.org/web/views/Distributions.html)\n\nChallenges\n========================================================\n\n1. Create a sample representing the number of dolphins seen per 10 hours of observation, for 100 observations (hint: assuming this is a number of independent events occurring in a fixed time)\n2. Create a sample representing the frequency of species in a quadrat (hint: assuming a few species will be very common and many species will be very rare)\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown2 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\nSolutions\n========================================================\n\n\n1.\n```{r}\ndolphins <- rpois(n = 1000,\n                  lambda = 3)\nhist(dolphins)\n```\n\n\nSolutions\n========================================================\n\n2.\n```{r}\nspecies <- rlnorm(n = 1000,\n                  mean = 25,\n                  sd=1)\nhist(species)\n```\n\n\nSimulating an experiment\n========================================================\n\nDesigning the experiment\nExample 2 factors, 2 levels, 3 replicates, full factorial\n```{r}\none_replicate <- data.frame(factorA=factor(rep(c(\"FacA_Level1\",\n                                     \"FacA_Level2\"),\n                                     2)),\n                            factorB=factor(rep(c(\"FacA_Level1\",\n                                     \"FacA_Level2\"),\n                                     each=2)))\nhead(one_replicate)                              \n```\n\n\n\nSimulating an experiment\n========================================================\n\nDesigning the experiment\nExample 2 factors, 2 levels, 3 replicates, full factorial\n```{r}\nexperiment1 <- NULL\nfor(i in LETTERS[1:3]){\n  one_replicate$replicate <- factor(i)\n  experiment1 <- rbind(experiment1,one_replicate)\n}\nhead(experiment1)\n```\n\nSimulating an experiment\n========================================================\n\nAssume factors a and b have equal effect size and\nhave an additive effect (no interactions)\n```{r}\nexperiment1$mean <- with(experiment1,\n                        as.numeric(factorA)+\n                          as.numeric(factorB))\nhead(experiment1)\n```\n\n\nSimulating an experiment\n========================================================\n\n```{r}\nexperiment1$response <- rnorm(n=length(experiment$mean),\n                             mean=experiment$mean,\n                             sd=1)\n```\n\nChallenge\n========================================================\n\n1. Plot experiment 1\n2. Analyze experiment 1\n- You know that both factorA and factorB have an additive effect, can you detect this form this experiment?\n- If you can detect an effect, what could you do to save money/time etc in this experiment?\n- If you can not detect an effect, what would you need to do to detect the known effect?\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown2 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\nSolution\n========================================================\n\n1.\n```{r}\nrequire(ggplot2)\np <- qplot(data=experiment1,\n           x=factorA,\n           y=response,\n           colour=factorB,\n           geom=\"boxplot\")\nprint(p)\n```\n\nSolution\n========================================================\n\n2.\n```{r}\nfit <- aov(data = experiment1,\n           response~factorA*factorB)\nsummary(fit)\nplot(fit)\n```\n\nAccelerate the process\n========================================================\n\nDesigning the experiment\n```{r}\nrequire(AlgDesign)\nexperiment2 <- gen.factorial(levels=c(3,2,2),\n                             nVars=3,\n                             varNames=c(\"A\",\"B\",\"C\"),\n                             factors=\"all\")\n\n```\n[Experimental design task view](https://cran.r-project.org/web/views/ExperimentalDesign.html)\n\n\nChallenge\n========================================================\n\n1. Create a data set simulating the effect of waste water runoff and intensive scuba diving for biodiversity (hint: species counts) of coral reefs\n2. Plot the results\n3. Analyze the results (hint: counts are not normaly distributed)\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown2 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>",
    "created" : 1453477275726.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2355876339",
    "id" : "7685220A",
    "lastKnownWriteTime" : 1453485504,
    "path" : "~/Documents/Teaching/Modules/Spring_2016/BS708_Professional_skills/Simulation/Simulation.Rpres",
    "project_path" : "Simulation.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_presentation"
}